name: Build Static Qt (双架构同步发布)

on:
  push:
    tags:
      - 'qt-build-*'
  workflow_dispatch:

env:
  QT_VERSION: "6.5.3"
  MSVC_TOOLSET: "142"
  OPENSSL_VERSION: "3_2_0"
  COMPRESSION_LEVEL: "6"

jobs:
  create-release:
    runs-on: windows-2022
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: 创建GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          # 第37行修复：正确引用环境变量（无需加.env）
          release_name: Qt ${{ env.QT_VERSION }} (MSVC${{ env.MSVC_TOOLSET }}-Static-OpenSSL)
          draft: false
          prerelease: false

  build-qt:
    needs: create-release
    name: Qt 6.5.3 (${{ matrix.arch }})
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x64, x86]
      fail-fast: false

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装基础工具
        run: |
          choco install 7zip strawberryperl python ninja -y
          refreshenv
          Write-Host "Ninja版本: $(ninja --version)"
          Write-Host "Perl版本: $(perl --version | Select-Object -First 1)"
          Write-Host "Python版本: $(python --version)"

      - name: 配置VS2019工具集(v142)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: ${{ env.MSVC_TOOLSET }}
          arch: ${{ matrix.arch }}

      - name: 安装对应架构的OpenSSL
        run: |
          if ("${{ matrix.arch }}" -eq "x64") {
            $opensslInstaller = "Win64OpenSSL-${{ env.OPENSSL_VERSION }}.exe"
            $opensslDir = "C:\Program Files\OpenSSL-Win64"
          } else {
            $opensslInstaller = "Win32OpenSSL-${{ env.OPENSSL_VERSION }}.exe"
            $opensslDir = "C:\Program Files (x86)\OpenSSL-Win32"
          }
          
          $opensslUrl = "https://slproweb.com/download/$opensslInstaller"
          Invoke-WebRequest -Uri $opensslUrl -OutFile $opensslInstaller -UseBasicParsing
          .\$opensslInstaller /silent /verysilent /sp- /norestart
          
          if (-not (Test-Path "$opensslDir\bin\openssl.exe")) {
            throw "OpenSSL安装失败"
          }
          echo "OPENSSL_ROOT_DIR=$opensslDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 下载Qt源代码
        run: |
          $qtMajorMinor = "${{ env.QT_VERSION }}" -replace '\.\d+$', ''
          $sourceUrl = "https://download.qt.io/official_releases/qt/$qtMajorMinor/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.zip"
          Invoke-WebRequest -Uri $sourceUrl -OutFile qt-source.zip -UseBasicParsing
          7z x qt-source.zip -oqt-source -y
          
          if (-not (Test-Path "qt-source\qt-everywhere-src-${{ env.QT_VERSION }}\configure.bat")) {
            throw "Qt源码解压失败"
          }

      - name: 配置Qt编译参数
        run: |
          $installDir = "C:\Qt\${{ env.QT_VERSION }}\msvc${{ env.MSVC_TOOLSET }}_${{ matrix.arch }}-static"
          New-Item -ItemType Directory -Path qt-build -Force | Out-Null
          Set-Location qt-build
          
          ..\qt-source\qt-everywhere-src-${{ env.QT_VERSION }}\configure.bat `
            -platform win32-msvc `
            -toolset v${{ env.MSVC_TOOLSET }} `
            -debug-and-release `
            -static `
            -static-runtime `
            -opensource `
            -confirm-license `
            -prefix "$installDir" `
            -openssl-linked `
            -I "${{ env.OPENSSL_ROOT_DIR }}\include" `
            -L "${{ env.OPENSSL_ROOT_DIR }}\lib" `
            -nomake examples `
            -nomake tests `
            -ninja `
            -skip qtandroidextras -skip qtios -skip qtmacextras `
            -skip qtwayland -skip qtx11extras -skip qtwasm `
            -skip qt3d -skip qtcharts -skip qtdatavis3d `
            -skip qtgamepad -skip qtlocation -skip qtmultimedia `
            -skip qtnetworkauth -skip qtpurchasing -skip qtremoteobjects `
            -skip qtscxml -skip qtsensors -skip qtserialbus `
            -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard `
            -skip qtwebchannel -skip qtwebengine -skip qtwebsockets `
            -skip qtwebview -skip qtxmlpatterns -skip qtlottie `
            -skip qtquick3d -skip qtquicktimeline -skip qtshadertools `
            -skip qttools -skip qttranslations

      - name: 用Ninja编译Qt
        run: |
          Set-Location qt-build
          ninja

      - name: 安装Qt到指定目录
        run: |
          Set-Location qt-build
          ninja install

      - name: 压缩编译结果
        run: |
          $installDir = "C:\Qt\${{ env.QT_VERSION }}\msvc${{ env.MSVC_TOOLSET }}_${{ matrix.arch }}-static"
          $archiveName = "qt-${{ env.QT_VERSION }}-msvc${{ env.MSVC_TOOLSET }}-${{ matrix.arch }}-static-openssl.7z"
          7z a -t7z -mx=${{ env.COMPRESSION_LEVEL }} $archiveName $installDir
          
          if (-not (Test-Path $archiveName)) {
            throw "压缩失败"
          }
          echo "ARCHIVE_NAME=$archiveName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: 上传压缩包到Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/x-7z-compressed
